= content_for :title do
  = @build.ref[0, 7]
  &ndash;
  = @build.project.name
= content_for :favicon do
  = favicon_link_tag image_path("#{@build.to_color}.png"), :type => 'image/png'

%h2.subheader
  - unless @build.project.main?
    - if main_project = @build.project.repository.main_project
      = link_to main_project.name, main_project
      &ndash;
  = link_to(@build.project.name, project_path(@build.project))
  &ndash;
  %code.build-status{ class: @build.state, title: @build.ref }
    = @build.ref[0, 7]
  %a.info{:href => show_link_to_commit(@build)}
    Show
  - if @project.main?
    %a.info{:href => show_link_to_compare(@build, @build.previous_successful_build.try(:ref), @build.ref), :title => 'show changes since last green build'}
      Compare to last green build

  .actions
    - if @build.repository.allows_kochiku_merges?
      %form{action: toggle_merge_on_success_project_build_path(@build.project, @build), method: :post}
        %label
          = check_box_tag :merge_on_success, true, @build.merge_on_success_enabled?, disabled: !eligible_for_merge_on_success?(@build), onchange: 'this.form.submit()'
          Merge on Success

    %label
      = check_box_tag :refresh, true, @build.is_running?
      Refresh

.build-info.build-info-subheader
  - if @build.succeeded? && !@project.main?
    %a.info{:href => show_link_to_create_pull_request(@build), :title => 'create a pull request against master'}
      Create pull request
  %span.info
    Created
    %abbr.timeago{:title => @build.created_at.to_json} recently
  %span.info
    Updated
    %abbr.timeago{:title => @build.updated_at.to_json} at some point
  - if @build.completed?
    %span.info
      = "Built in #{duration_strftime(@build.elapsed_time, "%Hh %Mm %Ss")}"
  - if @build.is_running?
    %span.info
      = button_to "Abort Build", abort_project_build_path(@build.project, @build), method: :patch, class: "abort-build"
  - if @build.failed? || @build.aborted?
    %span.info
      - if @build.build_parts.empty? || !@build.error_details.empty?
        = button_to "Retry Partitioning", retry_partitioning_project_build_path(@project, @build), :method => :post, :form_class => "retry-partitioning"
      - else
        = button_to "Rebuild failed parts", rebuild_failed_parts_project_build_path(@project, @build), :method => :post, :form_class => "rebuild-parts"

- if @build.error_details.present?
  .build-error
    %h2 Build error
    %pre= [@build.error_details[:message], @build.error_details[:backtrace]].join("\n")
%table.build-summary#build-summary
  %thead
    %tr
      %th.right.id Part
      %th.status Status
      - display_ruby_version = multiple_ruby_versions?(@build)
      - build_metadata_headers(@build, display_ruby_version).each do |header|
        %th{ class: header.downcase.gsub(/\W+/, '-') }= header
      %th.type Type
      %th.right.worker Worker
      %th.right.time Elapsed Time
      %th.right.count Attempt
      %th.right.actions Actions
  %tbody
    - @build.build_parts.each do |part|
      %tr{:"data-id" => part.id}
        %td.right= link_to(part.id, project_build_part_path(@project, @build, part))
        %td
          %span.part-status{:class => part.status}
            - text = part.status.to_s.capitalize
            - if (part.status == :running && part.last_attempt.log_streamer_port.present?)
              = link_to(text, stream_logs_path(part.last_attempt.id))
            - elsif artifact = part.last_stdout_artifact
              =link_to(text, artifact, :title => 'Last completed stdout.log')
            - else
              =text
        - build_metadata_values(@build, part, display_ruby_version).each do |value|
          %td= value
        %td= part.kind.to_s.capitalize
        %td.right
          - builder = part.last_attempt.try(:builder)
          = builder ? builder.sub(".#{Settings.domain_name}", '') : "pending"
        %td.right.elapsed= part.elapsed_time ? duration_strftime(part.elapsed_time) : "pending"
        %td.right= part.build_attempts.size
        %td.right
          - if part.unsuccessful?
            = link_to("Rebuild", rebuild_project_build_part_path(@project, @build, part), :method => :post)

= content_for :javascript do
  :javascript
    if ($('#build-summary tbody tr').length > 0) {
      $('#build-summary').tablesorter({ sortList: [ [1, 0] ] });
      StartTimes = #{
        start_times = {}
        @build.build_parts.each { |part| start_times[part.id] = part.started_at }
        start_times.to_json
      };
    }
    Kochiku.delayedRefresh({table: '.build-summary tbody', renderTime: Date.parse(#{@build.updated_at.to_json})});
